name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        build: [linux, windows, macos]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          archive-name: greedytile-linux.tar.gz
        - build: windows
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
          archive-name: greedytile-windows.zip
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          archive-name: greedytile-macos.tar.gz
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
    
    - name: Build Release Binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create Archive (Linux/macOS)
      if: matrix.build != 'windows'
      run: |
        staging="greedytile-${{ github.ref_name }}-${{ matrix.target }}"
        mkdir -p "$staging"
        cp target/${{ matrix.target }}/release/greedytile "$staging/"
        cp README.md LICENSE* "$staging/" || true
        tar czf "${{ matrix.archive-name }}" "$staging"
        echo "ASSET=${{ matrix.archive-name }}" >> $GITHUB_ENV
    
    - name: Create Archive (Windows)
      if: matrix.build == 'windows'
      shell: pwsh
      run: |
        $staging = "greedytile-${{ github.ref_name }}-${{ matrix.target }}"
        New-Item -ItemType Directory -Force -Path $staging
        Copy-Item "target/${{ matrix.target }}/release/greedytile.exe" -Destination $staging
        Copy-Item "README.md" -Destination $staging -ErrorAction SilentlyContinue
        Get-ChildItem "LICENSE*" | Copy-Item -Destination $staging -ErrorAction SilentlyContinue
        Compress-Archive -Path $staging -DestinationPath "${{ matrix.archive-name }}"
        echo "ASSET=${{ matrix.archive-name }}" >> $env:GITHUB_ENV
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        files: ${{ env.ASSET }}
        generate_release_notes: true